/*
   Copyright 2019 Dominik MadarÃ¡sz
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package gospec

import (
	"fmt"
	"strings"
)

// ExportGo exports data to the Go language format
func (ctx *Context) ExportGo() {
	fmt.Printf("/* This file has been generated by go-specgen */\npackage %s\n\n", ctx.FormatName)

	for _, en := range ctx.Enums {
		fmt.Printf("/* %s */\nconst (\n", en.Name)
		for _, ev := range en.Fields {
			fmt.Printf("\t%s ", ev.Value)

			if ev.DocString != "" {
				fmt.Printf(" /* %s */", strings.TrimSpace(ev.DocString))
			}

			fmt.Println("")
		}
		fmt.Printf(")\n\n")
	}

	fmt.Println("")

	for _, spec := range ctx.Specs {
		if spec.DocString != "" {
			fmt.Printf("/* %s */\n", strings.TrimSpace(spec.DocString))
		}

		fmt.Printf("type %s struct {\n", spec.Name)
		for _, fld := range spec.Fields {
			dumpField(fld)
		}
		fmt.Printf("}\n\n")
	}
}

func dumpField(field Field) {
	fmt.Printf("\t%s ", field.Name)

	if field.IsPointer {
		fmt.Print("*")
	} else if field.IsArray && field.ArrayLen == 0 {
		fmt.Print("[]")
	} else if field.IsArray && field.ArrayLen > 0 {
		fmt.Printf("[%d]", field.ArrayLen)
	}

	fmt.Printf("%s ", field.Type)

	if field.DocString != "" {
		fmt.Printf(" /* %s */", strings.TrimSpace(field.DocString))
	}

	fmt.Println("")
}
